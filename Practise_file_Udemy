# 1. Return true if no. is even
def even_list(rslt):
 z = [ 'True' if x%2 == 0 else x for x in rslt]
 return z

x = even_list([1,2,3,4,5,6,7,8,9,10])
print(x)

# 2. Return the no. if no. is even,if there are no even no. return nothing
def even_list(rslt):
 my_list = []
 for x in rslt:
  if x%2 == 0:
    my_list.append(x)

 return my_list

x = even_list([1,9,3,1,5,11,7,3,9,11])
print(x)

#3. tuple unpacking with Python Function
# Find the max salary of the given employees, and display the name and salary of that employee

def tu_unpck(work_hours):
 emp_name = ""
 salary = 0
 for (emp_name1, salary1) in work_hours:
  if salary1>salary:
   salary=salary1
   emp_name=emp_name1

  else:
   pass

 return(emp_name,salary)

x = tu_unpck([('Ayan', 100000), ('PD', 100000), ('Mayur', 40000)])
print(x)

# 4. Shuffle the list

from random import shuffle
def shuffle_list(my_list):
 shuffle(my_list)
 return my_list

x = shuffle_list([1,2,3,98,34,23])
print(x)

# 5. shuffle the list that contains letter 'O'. And player need to guess the index of letter O in the list. 
# Need to display if their guess is right or wrong

from random import shuffle
#create a function to shuffle the list
def shuffle_list(my_list):
 shuffle(my_list)
 return my_list

# create a function to take player's input as a guess
def player_guess():
 guess = ""
 while guess not in ['0', '1', '2']:
  guess = input("pick a number: 0, 1, 2")
 return int(guess)

def check_guess(my_list, guess):
 if my_list[guess] == 'o':
  print("correct")
  print(my_list)

 else:
  print("incorrect guess!")
  print(my_list)

#initial list
my_list = ['', 'o', '']

#shuffle list
mix_list = shuffle_list(my_list)

#user guess
guess=player_guess()

#check guess
check_guess(mix_list, guess)

#6. Define a function called myfunc that takes in a Boolean value (True or False).
#If True, return 'Hello', and if False, return 'Goodbye'

def myfnc(m):
 if m == True:
  return 'Hello'
 elif m == False:
  return 'Goodbye'

x = myfnc(False)
print(x)

#--------- *arg/**kwarg----------#

# 1. *arg takes multiple argument.

def myfnc1(*arg):
    return sum(arg)*2
x = myfnc1(10,20,30)
print(x)

#Instead of arg/kwarg, you can use any variable

# 2. def myfnc1(*arg):
  for list in arg:
      print(list)

# o/p: myfnc1(1,2,3,4,5)

#Note: *arg returns tuple, **kwarg returns dictionary


#3. Use **kwarg

def myfnc(**kwarg):
 print(kwarg)

 if 'dairy' in kwarg:
   print("Got my {}". format(kwarg['dairy']))
 else:
   print('Not what i need')

myfnc(dairy = 'milk', veg = 'spinach')

#o/p:{'dairy': 'milk', 'veg': 'spinach'}
#Got my milk

#4. use *arg and **kwarg together

def myfnc(*arg, **kwarg):
    print(arg)
    print(kwarg)
    print("I would like {} {}".format(arg[4], kwarg['vegie']))

myfnc(10,20,30,50,70, fruit='orange', vegie='kale')

#o/p:(10, 20, 30, 50, 70)
#{'fruit': 'orange', 'vegie': 'kale'}
#I would like 70 kale

#5. Define a function called myfunc that takes in a string, and returns a matching string where every even letter is uppercase,
#and every odd letter is lowercase.

def myfunc(name):
   b = ""
   a =len(name)
   for x in range(a):
       if x%2 == 0:
         b += name[x].upper()
       else:
         b += name[x].lower()
       
   print(b)
   
myfunc('sunil')

#5. SPY GAME: Write a function that takes in a list of integers and returns True if it contains 007 in order
 #spy_game([1,2,4,0,0,7,5]) --> True
 #spy_game([1,0,2,4,0,5,7]) --> True
 #spy_game([1,7,2,0,4,5,0]) --> False

def less1(a):
    q = []
    for x in a:
        if x in (0, 7):
            q.append(x)
        if (q) == [0, 0, 7]:
             return True

    return False

x = less1([1,2,4,0,0,7,5])
print(x)










       
        
        

  
 


