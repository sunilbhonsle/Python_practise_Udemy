#1. Take user input
# Note: input by default gives string, to convert it to int, use casting
x=int(input())
y=int(input())
print(x+y)

# Method 1: To print specific character from the given string
x= input("Enter a Word")
print (x[2])


# Method 2: To print specific character from the given string
x= input("Enter a Word")[2]
print (x)

# o/p: picks up 3rd letter

# Use eval function
x = eval(input("Enter a word"))
print(x)

#o/p: Enter a word2 + 5 - 1
# 6

# Use validation for the given input. Here, we are making sure that the entered value is int only. Until you enter digit, 
# it will keep on asking for the input

def user_choice():
    choice = 'WRONG'
    while choice.isdigit() == False:
        choice = input("Enter a value (0-10):")

    print(int(choice))

user_choice()

#2.
#In Python, the argv command is not a built-in command;
#it's a part of the sys module, and it's commonly used to access command-line arguments when a
#Python script is executed from the command line.
#In terminal under vim, put the below code
#argv is part of sys
# x and y captures 1st and 2nd argument that you pass in terminal, 0th is gonna be the file name
import sys

x = int(sys.argv[1])
y = int(sys.argv[2])
print(x+y)

#o/p:sunilbhonsle@Sunils-MacBook-Pro ~ % python3 argv_practise 3 8
#11

# 3. To get the details of in-built function
help(functionname)

#4. The dir() function in Python is used to list the attributes and methods of a Python object.
import math
print(dir(math))

# 5.
#1. Print these 3 strings separated by a New Line
#2. Print these 3 strings separated by a Tab Space
#3. Print 's'
#4. Print the Raw String of 's' 

def Escape(s1, s2, s3):
    # Write your code here
   s = "Python\tRaw\nString\tConcept"
   print(s1+'\n'+s2+'\n'+s3)
   print(s1+'\t'+s2+'\t'+s3)
   print(s)
   print(r'Python\tRaw\nString\tConcept')

# 6.
# Remove spaces from both end of strings: first, second, parent, city
# Capitalize : first, second, parent
# Print Strings with a space : first, second, parent, city
# Check if string : 'phone' only contains digits
# Check if phone number starts with value in string 'start' and print the result(True or False)
# Print : total no. of times 'strfind' appears in the strings : first, second, parent, city
# Print : list generated by using split function on 'string1'
# Find position of 'strfind' in 'city'

def resume(first, second, parent, city, phone, start, strfind, string1):
    # Write your code here
   x = first.strip().capitalize()
   y = second.strip().capitalize()
   z = parent.strip().capitalize()
   m = city.strip()
   a = x+y+z+m

   print(f'{x} {y} {z} {m}')
   for xx in phone:
    if xx.isdigit():  # Check if xx is a digit
        continue
    else:
        print('False')
   print('True')

   x = phone.startswith(start)
   print(x)
      
   pp = ""  
   for bb in a:
       if bb == strfind:
           pp += bb
   print(len(pp))
   
   ww = string1.split()
   print(ww)
   print(city.find(strfind))

#7.
Do as per the following to get the expected output:
1.Print 'Mylist'
2.Print the 1st element of  'Mylist'
3.Print the Last element of  'Mylist'
4.Add '3' as the Last element of 'Mylist'
5.Change the 4th element of 'Mylist' into '60'
6.Print 'Mylist' again
7.Print from the '2nd' element to the '5th' element of 'Mylist'
8.Append 'Mylist2' to 'Mylist'
9.Print 'Mylist' again
10.Extend 'Mylist' using 'Mylist2'
11.Print 'Mylist' again
12.Remove the Last element of 'Mylist'
13.Print 'Mylist' again
14.Print 'Length' of 'Mylist'


def List_Op(Mylist, Mylist2):
    # Write your code here
    print(Mylist)
    print(Mylist[1])
    print(Mylist[-1])
    Mylist.append(3)
    Mylist[3] = 60
    print(Mylist)
    print(Mylist[1:5])
    Mylist.append(Mylist2)
    print(Mylist)
    Mylist.extend(Mylist2)
    print(Mylist)
    Mylist.pop()
    print(Mylist)
    print(len(Mylist))

#8. Define a function called 'tuplefunction' which takes four parameters

The first parameter is list1 which takes a list of integers
The second parameter is list2 which takes a list of strings
The third parameter is string1 which takes a string
The fourth parameter is n which takes an integer
The function definition code stub is given in the editor. Generate the print statements based on condition given below:
convert the lists(list1,list2) into tuples and store them as tuple1 and tuple2.
concatenate tuple1 and tuple2 and print the concatenated tuple.
print the 4th index in the concatenated tuple.
create a nested tuple out of the two tuples(tuple1 and tuple2).
print the length of the nested tuple.
create a tuple with repetition of the string string1, n number of times and print tuple
print the maximum if tuple tuple1.

def tuplefunction(list1, list2, string1, n):
    # Write your code here

    tuple1= tuple(list1)
    tuple2= tuple(list2)
    mm = (tuple1+tuple2)
    print(mm)
    print(mm[4])
    x =(tuple1, tuple2)
    print(x)
    print(len(x))
    rep = tuple((string1,)*n)
    print(rep)
    print(max(tuple1))

# Return sum of fibonacci numbers(0,1,1,2,3,5,8,13,21......), fibonnaci is the sum of previous 2 digits.

def sumOfNFibonacciNumbers(n):
    # Write your code here
   if n==1:
       return 0
       
   else:
        xx = [0,1]
        
        i=0
        while i<=n-1-2:
            xx_last2 = xx[-2]
            xx_last1 = xx[-1]
            z = xx_last2+xx_last1
            xx.append(z)
            i=i+1
        
    
        su =0
        for m in xx:
            su =su+m
        return su
            
      
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = sumOfNFibonacciNumbers(n)

    fptr.write(str(result) + '\n')

    fptr.close()

# While-else, the below code is correct

count = 0
while count < 2:
   print (count, " is  less than 2")
   count = count + 2
else:
   print (count, " is not less than 2")

#Use of end
for char in 'Welcome':
       print(char, end='*')

Output:
W*
e*
l*
c*
o*
m*
e*


